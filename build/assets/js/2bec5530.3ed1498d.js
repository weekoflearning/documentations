"use strict";(self.webpackChunkweekoflearning_docsite=self.webpackChunkweekoflearning_docsite||[]).push([[592],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),m=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=m(t.components);return r.createElement(u.Provider,{value:e},t.children)},d="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,u=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=m(n),c=a,g=d["".concat(u,".").concat(c)]||d[c]||s[c]||l;return n?r.createElement(g,i(i({ref:e},p),{},{components:n})):r.createElement(g,i({ref:e},p))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o[d]="string"==typeof t?t:a,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7278:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const l={},i=void 0,o={unversionedId:"topics/coding Problem Patterns",id:"topics/coding Problem Patterns",title:"coding Problem Patterns",description:"Pattern | DS Involved | Sample Problems",source:"@site/docs/topics/coding Problem Patterns.md",sourceDirName:"topics",slug:"/topics/coding Problem Patterns",permalink:"/documentations/build/topics/coding Problem Patterns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsidebar",previous:{title:"Caching and Caches",permalink:"/documentations/build/topics/caches"},next:{title:"container",permalink:"/documentations/build/topics/container"}},u={},m=[],p={toc:m};function d(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Pattern"),(0,a.kt)("th",{parentName:"tr",align:null},"DS Involved"),(0,a.kt)("th",{parentName:"tr",align:null},"Sample Problems"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Sliding Window"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, String, HashTable"),(0,a.kt)("td",{parentName:"tr",align:null},"Longest Substring with 'K' Distinct Characters, Fruits into Baskets")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Islands (Matrix Traversal)"),(0,a.kt)("td",{parentName:"tr",align:null},"Matrix, Queue"),(0,a.kt)("td",{parentName:"tr",align:null},"Number of Islands, Flood Fill, Cycle in a Matrix")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Two Pointers"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, String, LinkedList"),(0,a.kt)("td",{parentName:"tr",align:null},"Squaring a Sorted Array, Dutch National Flag Problem, Minimum Window Sort")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Fast & Slow Pointers"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, String, LinkedList"),(0,a.kt)("td",{parentName:"tr",align:null},"Middle of the LinkedList, Happy Number, Cycle in a Circular Array")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Merge Intervals"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, Heap"),(0,a.kt)("td",{parentName:"tr",align:null},"Conflicting Appointments, Minimum Meeting Rooms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Cyclic Sort"),(0,a.kt)("td",{parentName:"tr",align:null},"Array"),(0,a.kt)("td",{parentName:"tr",align:null},"Find all Missing Numbers, Find all Duplicate Numbers, Find the First K Missing Positive Numbers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"In-place Reversal of a LinkedList"),(0,a.kt)("td",{parentName:"tr",align:null},"LinkedList"),(0,a.kt)("td",{parentName:"tr",align:null},"Reverse every K-element Sub-list, Rotate a LinkedList")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Breadth-First Search"),(0,a.kt)("td",{parentName:"tr",align:null},"Tree, Graph, Matrix, Queue"),(0,a.kt)("td",{parentName:"tr",align:null},"Binary Tree Level Order Traversal, Minimum Depth of a Binary Tree, Connect Level Order Siblings")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Depth First Search"),(0,a.kt)("td",{parentName:"tr",align:null},"Tree, Graph, Matrix"),(0,a.kt)("td",{parentName:"tr",align:null},"Path With Given Sequence, Count Paths for a Sum")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Two Heaps"),(0,a.kt)("td",{parentName:"tr",align:null},"Heap, Array"),(0,a.kt)("td",{parentName:"tr",align:null},"Find the Median of a Number Stream, Next Interval")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Subsets"),(0,a.kt)("td",{parentName:"tr",align:null},"Queue, Array, String"),(0,a.kt)("td",{parentName:"tr",align:null},"String Permutations by changing case, Unique Generalized Abbreviations")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Modified Binary Search"),(0,a.kt)("td",{parentName:"tr",align:null},"Array"),(0,a.kt)("td",{parentName:"tr",align:null},"Ceiling of a Number, Bitonic Array Maximum")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Bitwise XOR"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, Bits"),(0,a.kt)("td",{parentName:"tr",align:null},"Two Single Numbers, Flip and Invert an Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Top \u2018K\u2019 Elements"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, Heap, Queue"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2018K\u2019 Closest Points to the Origin, Maximum Distinct Elements")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"K-way Merge"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, Queue, Heap"),(0,a.kt)("td",{parentName:"tr",align:null},"Kth Smallest Number in M Sorted Lists, Kth Smallest Number in a Sorted Matrix")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0/1 Knapsack"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, HashTable"),(0,a.kt)("td",{parentName:"tr",align:null},"Equal Subset Sum Partition, Minimum Subset Sum Difference")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Unbounded Knapsack"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, HashTable"),(0,a.kt)("td",{parentName:"tr",align:null},"Rod Cutting, Coin Change")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Fibonacci Numbers"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, HashTable"),(0,a.kt)("td",{parentName:"tr",align:null},"Staircase, House Thief")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Palindromic Subsequence"),(0,a.kt)("td",{parentName:"tr",align:null},"Array, HashTable"),(0,a.kt)("td",{parentName:"tr",align:null},"Longest Palindromic Subsequence, Minimum Deletions in a String to make it a Palindrome")))))}d.isMDXComponent=!0}}]);