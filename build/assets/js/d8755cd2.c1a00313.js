"use strict";(self.webpackChunkweekoflearning_docsite=self.webpackChunkweekoflearning_docsite||[]).push([[546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9942:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>u,assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,s={unversionedId:"topics/Major Important Flows",id:"topics/Major Important Flows",title:"Major Important Flows",description:"O-auth-2 and OIDC are two different protocols that are often used together to provide authentication and authorization in modern web applications. They are often confused with each other, and this article aims to clear up the differences between them.",source:"@site/docs/topics/Major Important Flows.md",sourceDirName:"topics",slug:"/topics/Major Important Flows",permalink:"/documentations/build/topics/Major Important Flows",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsidebar",previous:{title:"Topics",permalink:"/documentations/build/category/topics"},next:{title:"authentication",permalink:"/documentations/build/topics/authentication"}},c={},l=[{value:"O-auth-2 sequence",id:"o-auth-2-sequence",level:3},{value:"Oidc sequence",id:"oidc-sequence",level:3},{value:"Kubernetese deployment flow",id:"kubernetese-deployment-flow",level:3}],u=e=>{let{children:t,color:n}=e;return(0,o.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},p={toc:l,Highlight:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(u,{color:"#25c2a0",mdxType:"Highlight"},"O-auth-2")," and ",(0,o.kt)(u,{color:"#1877F2",mdxType:"Highlight"},"OIDC")," are two different protocols that are often used together to provide authentication and authorization in modern web applications. They are often confused with each other, and this article aims to clear up the differences between them.",(0,o.kt)("h3",{id:"o-auth-2-sequence"},"O-auth-2 sequence"),(0,o.kt)("p",null,"OAuth2 is a protocol for authorization, allowing third-party applications to access resources on behalf of a user, without the user having to give their credentials to the third-party application. This is useful for scenarios such as allowing a mobile app to access a user's Google Drive files, without the user having to share their Google login credentials with the app."),(0,o.kt)("img",{src:"https://github.com/weekoflearning/documentations/assets/12728754/a411fc10-877b-485c-b5a9-48fb8e33e284",alt:"Example banner"}),(0,o.kt)("h3",{id:"oidc-sequence"},"Oidc sequence"),(0,o.kt)("p",null,"OpenID Connect (OIDC) is built on top of OAuth2 and provides an authentication layer. OIDC allows a user to authenticate with an identity provider (such as Google or Facebook) and then receive a JSON Web Token (JWT) which can be used to prove their identity to other applications. This allows applications to trust the user's identity without having to handle the user's credentials directly."),(0,o.kt)("mermaid",{value:"sequenceDiagram\n  participant User\n  participant Client\n  participant IdentityProvider\n  User->>Client: Navigates to the client app\n  Client->>IdentityProvider: Requests authentication\n  IdentityProvider->>User: Prompts for authentication\n  User--\x3e>IdentityProvider: Authenticates\n  IdentityProvider->>Client: Sends ID token and access token\n  Client->>User: Navigates to client app with access token"}),(0,o.kt)("h3",{id:"kubernetese-deployment-flow"},"Kubernetese deployment flow"),(0,o.kt)("p",null,'If a Git repository is hosted on GitHub (represented by "GitHub"), and a new code push triggers a deployment to a Kubernetes cluster (represented by "K8sCluster"). The deployment is initiated by the kubectl command-line tool (represented by "Kubectl") which communicates with the Kubernetes API to update the deployment.'),(0,o.kt)("p",null,"Once kubectl updates the deployment, it pulls the latest code from the Git repository and deploys the new version to the Kubernetes cluster. The Kubernetes cluster then verifies that the deployment was successful and sends a notification back to kubectl."),(0,o.kt)("p",null,"This is a basic representation of how a deployment from a Git repository to a Kubernetes cluster might work."),(0,o.kt)("mermaid",{value:"sequenceDiagram\n    participant GitHub\n    participant K8sCluster\n    participant Kubectl\n    participant Deployment\n    GitHub->>+K8sCluster: New code push\n    K8sCluster->>+Kubectl: Update deployment\n    Kubectl->>+Deployment: Pull latest code\n    Kubectl->>+K8sCluster: Deploy new version\n    K8sCluster->>-Deployment: Deployment successful"}))}d.isMDXComponent=!0}}]);