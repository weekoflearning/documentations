"use strict";(self.webpackChunkweekoflearning_docsite=self.webpackChunkweekoflearning_docsite||[]).push([[255],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>d});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=n.createContext({}),p=function(e){var r=n.useContext(a),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(a.Provider,{value:r},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),y=p(t),m=i,d=y["".concat(a,".").concat(m)]||y[m]||u[m]||s;return t?n.createElement(d,o(o({ref:r},l),{},{components:t})):n.createElement(d,o({ref:r},l))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=m;var c={};for(var a in r)hasOwnProperty.call(r,a)&&(c[a]=r[a]);c.originalType=e,c[y]="string"==typeof e?e:i,o[1]=c;for(var p=2;p<s;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7737:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=t(7462),i=(t(7294),t(3905));const s={},o=void 0,c={unversionedId:"flows/https",id:"flows/https",title:"https",description:"HTTPS flow involves following steps.",source:"@site/docs/flows/https.md",sourceDirName:"flows",slug:"/flows/https",permalink:"/documentations/build/flows/https",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsidebar",previous:{title:"container",permalink:"/documentations/build/topics/container"},next:{title:"sample",permalink:"/documentations/build/sample"}},a={},p=[],l={toc:p};function y(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"HTTPS flow involves following steps."),(0,i.kt)("mermaid",{value:"graph TD;\n  subgraph Browser\n    A[Enter URL in browser] --\x3e B[DNS resolution];\n    B --\x3e C[Initiate TCP connection];\n    C --\x3e D[Perform SSL/TLS handshake];\n    D --\x3e E[Send ClientHello];\n    F[Receive ServerHello] --\x3e D;\n    G[Receive Certificate] --\x3e F;\n    H[Receive ServerKeyExchange] --\x3e G;\n    I[Receive ServerHelloDone] --\x3e H;\n    D --\x3e J[Send ClientKeyExchange];\n    J --\x3e K[Generate premaster secret];\n    K --\x3e L[Encrypt premaster secret with server's public key];\n    L --\x3e M[Send encrypted premaster secret];\n  end\n  subgraph Server\n    M --\x3e N[Receive encrypted premaster secret];\n    O[Decrypt premaster secret with private key] --\x3e N;\n    P[Generate master secret] --\x3e O;\n    Q[Send ServerHello];\n    Q --\x3e R[Send Certificate];\n    Q --\x3e S[Send ServerKeyExchange];\n    Q --\x3e T[Send ServerHelloDone];\n    U[Receive ClientKeyExchange] --\x3e T;\n    V[Decrypt premaster secret with server's private key] --\x3e U;\n    W[Generate master secret] --\x3e V;\n  end\n  subgraph Browser\n    N --\x3e X[Derive master secret];\n    X --\x3e Y[Send ChangeCipherSpec];\n    Y --\x3e Z[Send Finished];\n    AA[Receive ChangeCipherSpec] --\x3e Z;\n    AB[Receive Finished] --\x3e AA;\n    Z --\x3e AC[Encrypt HTTP request];\n    AC --\x3e AD[Send encrypted HTTP request];\n  end\n  subgraph Server\n    AD --\x3e AE[Receive encrypted HTTP request];\n    AF[Decrypt HTTP request];\n    AG[Process request];\n    AH[Generate HTTP response];\n    AI[Encrypt HTTP response];\n    AJ[Send encrypted HTTP response];\n  end\n  subgraph Browser\n    AJ --\x3e AK[Receive encrypted HTTP response];\n    AL[Decrypt HTTP response];\n    AM[Render response];\n  end"}),(0,i.kt)("hr",null),(0,i.kt)("mermaid",{value:"sequenceDiagram\n    participant Browser\n    participant Server\n    participant CertificateAuthority\n    participant SymmetricKey\n    participant AsymmetricKey\n\n    Browser->>+Server: Hello, initiate TLS handshake\n    Server->>Browser: Hello, response to TLS handshake\n    Note over Server: Server sends its certificate to<br/>Browser, including public key\n    Browser->>+CertificateAuthority: Request server certificate verification\n    CertificateAuthority->>+Browser: Return certificate authority certificate\n    Browser->>+CertificateAuthority: Verify server certificate\n    CertificateAuthority--\x3e>-Browser: Verification success\n    Browser->>+SymmetricKey: Generate symmetric key\n    Note over Browser: Key is encrypted<br/>with server's public key<br/>and sent to server\n    Browser->>AsymmetricKey: Encrypt message with symmetric key\n    AsymmetricKey--\x3e>Server: Encrypted message\n    Note over Server: Server uses its private key<br/>to decrypt the symmetric key\n    Server->>+SymmetricKey: Decrypt symmetric key\n    Server->>SymmetricKey: Use symmetric key to decrypt message\n    SymmetricKey--\x3e>-Server: Response message\n    Note over Server: All subsequent messages are encrypted<br/>with symmetric key, using<br/>asymmetric encryption only<br/>to exchange keys\n"}))}y.isMDXComponent=!0}}]);